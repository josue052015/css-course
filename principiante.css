 /**************CLASE 1:  selectores *********************/

 /* tipos de selectores:

-clase
-id
-universal (*)
-de tipo (nombre del elemento ejemplo "H1")
-por atributo (disabled por ejemplo o cualquier otro atributo de la etiqueta html) 
-descendiente (funciona cuando tiene hijos y solo se aplica al hijo)
-pseudoclases
*/

 /* selector por atributo */
 [type=button] {
     background-color: red;
 }

 /* selector por descendiente */

 h1 span {
     color: red;
 }

 /* selector por pseudoclase (active es cuando el usuario hace 
cliek en un elemento html */

 .title-span:active {
     color: aqua;
 }

 /********************* CLASE 2: Especificidad *********************/

 /* La especificidad es la jerarquia con la que se aplican los estilos en css un nivel mas alto
sobreescribe los estilos del mas bajo

1- !important
2- estilos en linea (lo que se escribe dentro de style en html)
3- identificadores (id)
4- clases
5- pseudoclases
6- atributos
7- elementos
8- pseudoelementos

*/

 /********************* CLASE 3: metodologia BEM *********************/

 /* BEM es una metodologia para no tener problemas de especificidad al usar muchas clases en css
y nombramos las clases segun el bloque y el elemento. EJ: 

<div class="contact-form">
<input type="text" class="contact-form__input--active">(-- lo utilizamos para indicar que se va
                                                        a utilizar un estilo especifico para un
                                                        elemento en especifico)                   
<input type="text" class="contact-form__input">
<input type="text" class="contact-form__input">
<input type="text" class="contact-form__input">
<input type="text" class="contact-form__input">
</div>

en el siguiente caso:

<div class="contact-form">
<h2 class="contact-form__h2">
<span class="contact-form__h2-p"></span>
</h2>
</div>
*/

 /********************* CLASE 4: medidas *********************/

 /* hay 2 tipos de medidas las cuales son:

-fijas: son las que no cambian como: px, mm, cm, ect.

-relativas: son las que varian como: em y rem. ( "rem" es más útil para establecer tamaños y 
                                                dimensiones segun el tamaño de toda 
                                                la página, mientras que "em" es más útil para
                                                 establecer tamaños y dimensiones segun el 
                                                 tamaño del elemento padre.)
*/

 /********************* CLASE 5: normalize  *********************/

 /* normalize.css es hoja de estilo CSS que armoniza la visualización inicial de los navegadores 
y que corrige algunos errores. (se puede descargar o instalarse con npm) */

 /********************* CLASE 6: cajas  *********************/

 /* Las cajas son los bloques que contienen los elementos en html. Los elementos pueden ser:

- elemento en linea (ocupa solo el ancho que ocupa el elemento dentro de la caja. Ej: span)
- elemento en bloques (ocupa todo el ancho del bloque. Ej: h1)

NOTA: 

- A un elemento en linea no se le puede modificar su altura ni anchura, sin embargo a un 
  elemento en bloque si 

- Un shorthand property es una propiedad que podemos acortar (como el padding, que podemos
  establecer un padding general o un padding-top)
*/

 h1 {
     /* esto es para hacer que un elemento se comporte como un elemento en linea.
    En consecuencia este ocupara solo el espacio necesario en la caja y no se le 
    podra añadir espacio de ninguna forma.
    
    */
     display: inline;
 }

 .display-block-example {
     /* esto es para hacer que un elemento se comporte como un elemento en bloque */
     display: block;
 }

 /* box sizing: nos ayuda a incluir el padding y el borde en el ancho y alto total del 
 la caja
 */

 .box-sizing-contentbox{
    background-color: brown;
    width: 300px;
    height: 300px;
    padding: 50px;
    /* content-box le suma el padding del elemento al alto y ancho total de la caja */
    box-sizing:content-box;
 }

 .box-sizing-borderbox{
    background-color: brown;
    width: 300px;
    height: 300px;
    padding: 50px;
    /* border-box mantiene el mismo alto y ancho total de la caja sin importar el 
    padding */
    box-sizing:border-box;
 }